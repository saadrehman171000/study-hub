generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  clerkId        String          @unique
  email          String          @unique
  firstName      String?
  lastName       String?
  profilePicture String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  assignments    Assignment[]
  notes          Note[]
  resources      Resource[]
  studySessions  StudySession[]
  calendarEvents CalendarEvent[]
  academicGoals  AcademicGoal[]
}

model Assignment {
  id          String   @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime
  status      String   @default("not-started")
  subject     String?
  priority    String   @default("medium")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        String
  fileUrl     String?
  fileSize    String?
  parentId    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudySession {
  id        String    @id @default(uuid())
  startTime DateTime
  endTime   DateTime?
  duration  Int?
  subject   String?
  userId    String
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String?
  subject   String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id          String    @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  allDay      Boolean   @default(false)
  type        String?
  location    String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MusicTrack {
  id         String   @id @default(uuid())
  title      String
  artist     String
  duration   String
  category   String
  coverImage String?
  audioSrc   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AcademicGoal {
  id          String      @id @default(uuid())
  title       String
  description String?
  targetDate  DateTime
  category    String
  progress    Int
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones  Milestone[]
}

model Milestone {
  id           String       @id @default(uuid())
  title        String
  completed    Boolean      @default(false)
  dueDate      DateTime?
  goalId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  academicGoal AcademicGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model AIConversation {
  id           String      @id @default(uuid())
  assignmentId String
  userId       String
  messages     AIMessage[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model AIMessage {
  id             String         @id @default(uuid())
  text           String
  role           String         @default("assistant") // "assistant" or "user"
  conversationId String
  conversation   AIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  timestamp      DateTime       @default(now())
}
